//===========
// SNES SA-1
//===========

// SA-1 Write Registers
constant SA1_CCNT($2200)  // SA-1 CPU Control                                        (4.1.1) 
constant SA1_SIE($2201)   // SNES CPU Interrupt Enable                               (4.1.2) 
constant SA1_SIC($2202)   // SNES CPU Interrupt Clear                                (4.1.3) 
constant SA1_CRVL($2203)  // SA-1 CPU Reset Vector Lo                                (4.1.4) (Bits 0..7)
constant SA1_CRVH($2204)  // SA-1 CPU Reset Vector Hi                                (4.1.4) (Bits 8..15)
constant SA1_CNVL($2205)  // SA-1 CPU NMI Vector Lo                                  (4.1.5) (Bits 0..7)
constant SA1_CNVH($2206)  // SA-1 CPU NMI Vector Hi                                  (4.1.5) (Bits 8..15)
constant SA1_CIVL($2207)  // SA-1 CPU IRQ Vector Lo                                  (4.1.6) (Bits 0..7)
constant SA1_CIVH($2208)  // SA-1 CPU IRQ Vector Hi                                  (4.1.6) (Bits 8..15)
constant SA1_SCNT($2209)  // SNES CPU Control                                        (4.1.7) 
constant SA1_CIE($220A)   // SA-1 CPU Interrupt Enable                               (4.1.8) 
constant SA1_CIC($220B)   // SA-1 CPU Interrupt Clear                                (4.1.9) 
constant SA1_SNVL($220C)  // SNES CPU NMI Vector Lo                                  (4.1.10) (Bits 0..7)
constant SA1_SNVH($220D)  // SNES CPU NMI Vector Hi                                  (4.1.10) (Bits 8..15)
constant SA1_SIVL($220E)  // SNES CPU IRQ Vector Lo                                  (4.1.11) (Bits 0..7)
constant SA1_SIVH($220F)  // SNES CPU IRQ Vector Hi                                  (4.1.11) (Bits 8..15) 
constant SA1_TMC($2210)   // H/V Timer Control                                       (4.1.12) 
constant SA1_CTR($2211)   // SA-1 CPU Timer Restart                                  (4.1.13) 
constant SA1_HCNTL($2212) // Set H-Count Lo                                          (4.1.14) (Bits 0..7) 
constant SA1_HCNTH($2213) // Set H-Count Hi                                          (4.1.14) (Bits 8..15) (Only Bit 8 Used)
constant SA1_VCNTL($2214) // Set V-Count Lo                                          (4.1.15) (Bits 0..7) 
constant SA1_VCNTH($2215) // Set V-Count Hi                                          (4.1.15) (Bits 8..15) (Only Bit 8 Used)
constant SA1_CXB($2220)   // Set Super MMC Bank C                                    (4.1.16)
constant SA1_DXB($2221)   // Set Super MMC Bank D                                    (4.1.17)
constant SA1_EXB($2222)   // Set Super MMC Bank E                                    (4.1.18)
constant SA1_FXB($2223)   // Set Super MMC Bank F                                    (4.1.19)
constant SA1_BMAPS($2224) // SNES CPU BW-RAM Address Mapping                         (4.1.20) 
constant SA1_BMAP($2225)  // SA-1 CPU BW-RAM Address Mapping                         (4.1.21) 
constant SA1_SBWE($2226)  // SNES CPU BW-RAM Write Enable                            (4.1.22) 
constant SA1_CBWE($2227)  // SA-1 CPU BW-RAM Write Enable                            (4.1.23) 
constant SA1_BWPA($2228)  // BW-RAM Write Protected Area                             (4.1.24) 
constant SA1_SIWP($2229)  // SA-1 I-RAM Write Protection                             (4.1.25) (S-CPU Controlled) 
constant SA1_CIWP($222A)  // SA-1 I-RAM Write Protection                             (4.1.26) (SA-1 Controlled)
constant SA1_DCNT($2230)  // DMA Control                                             (4.1.27) 
constant SA1_CDMA($2231)  // Character Conversion OMA Parameters                     (4.1.28) 
constant SA1_SDAL($2232)  // DMA Source Device Start Address Lo                      (4.1.29) (Bits 0..7)
constant SA1_SDAH($2233)  // DMA Source Device Start Address Hi                      (4.1.29) (Bits 8..15)
constant SA1_SDAB($2234)  // DMA Source Device Start Address B                       (4.1.29) (Bits 16..23)
constant SA1_DDAL($2235)  // DMA Destination Start Address Lo                        (4.1.30) (Bits 0..7) 
constant SA1_DDAH($2236)  // DMA Destination Start Address Hi                        (4.1.30) (Bits 8..15) 
constant SA1_DDAB($2237)  // DMA Destination Start Address B                         (4.1.30) (Bits 16..23) 
constant SA1_DTCL($2238)  // DMA Terminal Counter Lo                                 (4.1.31) (Bits 0..7) 
constant SA1_DTCH($2239)  // DMA Terminal Counter Hi                                 (4.1.31) (Bits 8..15) 
constant SA1_BBF($223F)   // BW-RAM Bit Map Format                                   (4.1.32)
constant SA1_BRF0($2240)  // Bit Map Register File 0                                 (4.1.33)
constant SA1_BRF1($2241)  // Bit Map Register File 1                                 (4.1.33)
constant SA1_BRF2($2242)  // Bit Map Register File 2                                 (4.1.33)
constant SA1_BRF3($2243)  // Bit Map Register File 3                                 (4.1.33)
constant SA1_BRF4($2244)  // Bit Map Register File 4                                 (4.1.33)
constant SA1_BRF5($2245)  // Bit Map Register File 5                                 (4.1.33)
constant SA1_BRF6($2246)  // Bit Map Register File 6                                 (4.1.33)
constant SA1_BRF7($2247)  // Bit Map Register File 7                                 (4.1.33)
constant SA1_BRF8($2248)  // Bit Map Register File 8                                 (4.1.33) 
constant SA1_BRF9($2249)  // Bit Map Register File 9                                 (4.1.33) 
constant SA1_BRFA($224A)  // Bit Map Register File A                                 (4.1.33) 
constant SA1_BRFB($224B)  // Bit Map Register File B                                 (4.1.33)
constant SA1_BRFC($224C)  // Bit Map Register File C                                 (4.1.33) 
constant SA1_BRFD($224D)  // Bit Map Register File D                                 (4.1.33)
constant SA1_BRFE($224E)  // Bit Map Register File E                                 (4.1.33) 
constant SA1_BRFF($224F)  // Bit Map Register File F                                 (4.1.33)
constant SA1_MCNT($2250)  // Arithmetic Control                                      (4.1.34) 
constant SA1_MAL($2251)   // Arithmetic Parameters: Multiplicand/Dividend Lo         (4.1.35) (Bits 0..7)  
constant SA1_MAH($2252)   // Arithmetic Parameters: Multiplicand/Dividend Hi         (4.1.35) (Bits 8..15)  
constant SA1_MBL($2253)   // Arithmetic Parameters: Multiplier/Divisor Lo            (4.1.36) (Bits 0..7)  
constant SA1_MBH($2254)   // Arithmetic Parameters: Multiplier/Divisor Hi            (4.1.36) (Bits 8..15) 
constant SA1_VBD($2258)   // Variable Length Bit Processing                          (4.1.37) 
constant SA1_VDAL($2259)  // Variable Length Bit Game Pak ROM Start Address Lo       (4.1.38) (Bits 0..7)  
constant SA1_VDAH($225A)  // Variable Length Bit Game Pak ROM Start Address Hi       (4.1.38) (Bits 8..15)  
constant SA1_VDAB($225B)  // Variable Length Bit Game Pak ROM Start Address B        (4.1.38) (Bits 16..23)  

// SA-1 Read Registers
constant SA1_SFR($2300)   // SNES CPU Flag Read                                      (4.1.39) 
constant SA1_CFR($2301)   // SA-1 CPU Flag Read                                      (4.1.40) 
constant SA1_HCRL($2302)  // H-Count Read Lo                                         (4.1.41) 
constant SA1_HCRH($2303)  // H-Count Read Hi                                         (4.1.41) 
constant SA1_VCRL($2304)  // V-Count Read Lo                                         (4.1.42) 
constant SA1_VCRH($2305)  // V-Count Read Hi                                         (4.1.42) 
constant SA1_MR1($2306)   // Arithmetic Result (Product/Quotient/Accumulative Sum) 1 (4.1.43) (Bits 0..7)   
constant SA1_MR2($2307)   // Arithmetic Result (Product/Quotient/Accumulative Sum) 2 (4.1.43) (Bits 8..15) 
constant SA1_MR3($2308)   // Arithmetic Result (Product/Quotient/Accumulative Sum) 3 (4.1.43) (Bits 16..23) 
constant SA1_MR4($2309)   // Arithmetic Result (Product/Quotient/Accumulative Sum) 4 (4.1.43) (Bits 24..31) 
constant SA1_MR5($230A)   // Arithmetic Result (Product/Quotient/Accumulative Sum) 5 (4.1.43) (Bits 32..39)
constant SA1_OF($230B)    // Arithmetic Overflow Flag                                (4.1.44) 
constant SA1_VDPL($230C)  // Variable Length Data Read Port Lo                       (4.1.45) (Bits 0..7)
constant SA1_VDPH($230D)  // Variable Length Data Read Port Hi                       (4.1.45) (Bits 8..15)
constant SA1_VC($230E)    // Version Code Register                                   (4.1.46)